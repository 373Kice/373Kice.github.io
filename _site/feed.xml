<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>373Kice 的博客</title>
    <description></description>
    <link>http://localhost:4001/</link>
    <atom:link href="http://localhost:4001/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 05 Jul 2019 17:02:40 +0800</pubDate>
    <lastBuildDate>Fri, 05 Jul 2019 17:02:40 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>almaBTE 1.3.2安装避坑指南</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#almabte-安装避坑指南&quot; id=&quot;markdown-toc-almabte-安装避坑指南&quot;&gt;almaBTE 安装避坑指南&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#almabte安装&quot; id=&quot;markdown-toc-almabte安装&quot;&gt;almaBTE安装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#官方文档安装方法&quot; id=&quot;markdown-toc-官方文档安装方法&quot;&gt;官方文档安装方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#服务器上个人用户安装-almabte&quot; id=&quot;markdown-toc-服务器上个人用户安装-almabte&quot;&gt;服务器上个人用户安装 almaBTE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#前期准备&quot; id=&quot;markdown-toc-前期准备&quot;&gt;前期准备&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#安装过程&quot; id=&quot;markdown-toc-安装过程&quot;&gt;安装过程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#总结&quot; id=&quot;markdown-toc-总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;almabte-安装避坑指南&quot;&gt;almaBTE 安装避坑指南&lt;/h2&gt;

&lt;a href=&quot;http://www.almabte.eu/&quot;&gt;almaBTE&lt;/a&gt; 官方介绍：
&lt;code class=&quot;highlighter-rouge&quot;&gt;almaBTE&lt;/code&gt; consists of a library and a collection of executables allowing the user to calculate thermal transport properties of heterogeneous structures, using only ab-initio data, and solving the phonon Boltzmann Transport Equation (BTE).

&lt;h3 id=&quot;almabte安装&quot;&gt;almaBTE安装&lt;/h3&gt;

&lt;hr /&gt;
官网给出了 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker image for v1.3.1&lt;/code&gt; &lt;a href=&quot;https://1drv.ms/u/s!AsAFTyZWWh4MoVgpWj1QuuUR4Jzd&quot;&gt;https://1drv.ms/u/s!AsAFTyZWWh4MoVgpWj1QuuUR4Jzd&lt;/a&gt;, image是放在OneDrive上的，你懂的，国内直连不可以，一直纳闷为什么客户端OneDrive能用，网页却无法链接。
另外我还不会docker部署，就先放弃吧，老老实实源码安装。

以下是具体安装过程

&lt;h3 id=&quot;官方文档安装方法&quot;&gt;官方文档安装方法&lt;/h3&gt;

按照官方文档的操作
只需要配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake boost hdf5&lt;/code&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cmake libboost-all-dev libhdf5-dev &lt;span class=&quot;c&quot;&gt;# ubuntu 下配置环境 (这三个的具体作用以后再说。。。)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

如果你是centos

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cmake3 boost-devel hdf5-devel &lt;span class=&quot;c&quot;&gt;# centos 下配置环境&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

关于&lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;因为我在centos环境下&lt;code class=&quot;highlighter-rouge&quot;&gt;yum install cmake&lt;/code&gt; 安装的&lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt; 不认Intel编译器环境所以建议大家安装&lt;code class=&quot;highlighter-rouge&quot;&gt;cmake3&lt;/code&gt;

然后就可以编译了

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cmake libboost-all-dev libhdf5-dev &lt;span class=&quot;c&quot;&gt;# ubuntu 下配置环境&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
wget http://www.almabte.eu/wp-content/uploads/2018/10/almabte-v1.3.2.tar.gz

&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxvf&lt;/span&gt; almabte-v1.3.2.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;almabte-v1.3.2
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
cmake3 .. &lt;span class=&quot;c&quot;&gt;# or cmake ..&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 如果过程中没有报错，会打印出找到的编译器环境以及boost，hdf5&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#然后就可以&lt;/span&gt;
make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 4 all &lt;span class=&quot;c&quot;&gt;# 并行make，4是调用4个核 或者 make all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#make 运行完之后进行测试&lt;/span&gt;
make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 4 &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 测试过程会打印Passed or Failed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 如果足够幸运，安装完成那么build目录下src中会出现almaBET的所有可执行文件&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#添加进环境变量&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=$PATH:&quot;&amp;lt;alma_dir&amp;gt;/build/src&quot; '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc &lt;span class=&quot;c&quot;&gt;#alma_dir改为alma软件的路径&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

可以尽情玩耍了！！！

理论上说这样就该成功了，可是安装过程中总会遇到一些问题，比如你没有管理员权限。。

&lt;h3 id=&quot;服务器上个人用户安装-almabte&quot;&gt;服务器上个人用户安装 almaBTE&lt;/h3&gt;

&lt;hr /&gt;
就我亲身经历而言，有管理员权限我也没有很简单的安装上almaBTE；百度之后按照&lt;a href=&quot;https://blog.csdn.net/samzlhd/article/details/90453405&quot;&gt;编译安装almabte-1.3.1心得&lt;/a&gt;这一篇教程，最终安装成功。但这中间还是遇到一些问题，在这里码一码。

&lt;h3 id=&quot;前期准备&quot;&gt;前期准备&lt;/h3&gt;

并行计算库，&lt;a href=&quot;https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.20/src/hdf5-1.8.20.tar.bz2&quot;&gt;hdf5-1.8.20&lt;/a&gt;，&lt;a href=&quot;https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.bz2&quot;&gt;boost-1.68.0&lt;/a&gt;。

&lt;h3 id=&quot;安装过程&quot;&gt;安装过程&lt;/h3&gt;

具体的编译过程参考&lt;a href=&quot;https://blog.csdn.net/samzlhd/article/details/90453405&quot;&gt;编译安装almabte-1.3.1心得&lt;/a&gt;，我这里最简单的列一下过程。

&lt;ol&gt;
  &lt;li&gt;并行环境一般服务器都会安装好，这里不再赘述，我用的Intel全家桶。另外&lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;的安装这里也不赘述。&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.20/src/hdf5-1.8.20.tar.bz2&quot;&gt;hdf5-1.8.20&lt;/a&gt;下载编译,
常规的 &lt;code class=&quot;highlighter-rouge&quot;&gt;./confugure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/code&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.20/src/hdf5-1.8.20.tar.bz2
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-jxvf&lt;/span&gt; hdf5-1.8.20.tar.bz2
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hdf5-1.8.20
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/js/software/hdf5-1.8.20 &lt;span class=&quot;nt&quot;&gt;--enable-cxx&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#设置安装目录，并使用c&lt;/span&gt;
make
make isntall
&lt;span class=&quot;c&quot;&gt;# 安装以后检查是否生成 libhdf5_cpp.so&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#加入环境变量&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/home/js/software/hdf5-1.8.20/bin
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LD_LIBRARY_PATH&lt;/span&gt;:/home/js/software/hdf5-1.8.20/lib
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CPATH&lt;/span&gt;:/home/js/software/hdf5-1.8.20/include
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Boost编译

    这里要注意修改一个&lt;code class=&quot;highlighter-rouge&quot;&gt;project-config.jam&lt;/code&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; wget https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.bz2
 &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-jxvf&lt;/span&gt; boost_1_68_0.tar.bz2
 &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;boost_1_68_0
 ./bootstrap.sh &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/js/software/boost_1_68_0
 &lt;span class=&quot;c&quot;&gt;#之后会生成一个project-config.jam文件，用vi之类的打开，在末尾加上&lt;/span&gt;
 using mpi : /opt/intel/impi/2019.2.187/intel64/bin/mpiccmpicc &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 声明mpicc路径，注意空格，&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#编译完之后应该有libboost_mpi.so、libboost_mpi.a之类的，否则编译失败&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#总之一定要生成boost的mpi库，因为编译almabte要用到。这里参考的是https://www.boost.org/doc/libs/1_70_0/doc/html/mpi/getting_started.html&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#然后编译安装boost&lt;/span&gt;
 ./b2
 ./b2 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    编译almaBTE

    进入almaBTE文件夹

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build
 &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
 cmake .. &lt;span class=&quot;c&quot;&gt;# or cmake3 ..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    如果正常的话这里就会打印，找到了相关的Intel编译器，以及boost和hdf5。

    如果没有成功的话，则修改上层目录中的&lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;boost&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;hdf5&lt;/code&gt;的路径

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; vi ../CMakeLists.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    找到   &lt;code class=&quot;highlighter-rouge&quot;&gt;# Find some components from Boost.&lt;/code&gt;

    增加一行

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BOOST_ROOT &lt;span class=&quot;s2&quot;&gt;&quot;/home/js/software/boost_1_68_0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;####修改这里为boost的路径&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    最终为

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;# Find some components from Boost.&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;BOOST_ROOT &lt;span class=&quot;s2&quot;&gt;&quot;/home/js/software/boost_1_68_0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;####修改这里为boost的路径&lt;/span&gt;
 find_package&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Boost COMPONENTS system filesystem mpi serialization log REQUIRED&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 include_directories&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Boost_INCLUDE_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 link_directories&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Boost_LIBRARY_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 add_definitions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-DBOOST_LOG_DYN_LINK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Boost_USE_MULTITHREADED OFF&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    如果hdf5报错，同样在&lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;中，定位到&lt;code class=&quot;highlighter-rouge&quot;&gt;# Try to find hdf5 in the system.&lt;/code&gt;

    添加

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; HDF5_ROOT &lt;span class=&quot;s2&quot;&gt;&quot;/home/js/software/hdf5-1.8.20&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    解决上述问题之后，进入&lt;code class=&quot;highlighter-rouge&quot;&gt;almaBTE&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;文件夹

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cmake ..
 make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 4 all
 make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 4 &lt;span class=&quot;nb&quot;&gt;test
 echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=$PATH:&quot;&amp;lt;alma_dir&amp;gt;/build/src&quot; '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc &lt;span class=&quot;c&quot;&gt;#alma_dir改为alma软件的路径&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;完成以后加入环境变量，就可以在任何地方玩耍了。
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

总结一下这次almaBTE的安装，

&lt;ol&gt;
  &lt;li&gt;Linux下软件安装一定要确定清楚依赖&lt;/li&gt;
  &lt;li&gt;同样的依赖，编译依赖时，参数不同，产生的&lt;code class=&quot;highlighter-rouge&quot;&gt;libxxx.so&lt;/code&gt;等不同，可能作用就不一样了。默认安装有时候会有问题。这就感觉安装软件没有win那样双击简便。这也和Linux特色有关。&lt;/li&gt;
  &lt;li&gt;Linux就是用来折腾的&lt;/li&gt;
&lt;/ol&gt;

我曾经尝试过把centos7作为主力系统，vm中win10做辅助系统。但是用了1个星期后，我还是转回了我的win10。。。主要是离不开win10，vm中win又时常崩溃（原因不知），又没时间折腾了。如果Linux（centos7）下的软件生态更好一点，也许就完全可以办公了。Linux敲代码还是很舒服，毕竟各种IDE都支持Linux。（用centos而不用其它的Ubuntu等，是因为要做计算服务器用，据说centos更稳定，我也没做过测试。）

&lt;hr /&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    编译安装almabte-1.3.1心得 &lt;a href=&quot;https://blog.csdn.net/samzlhd/article/details/90453405&quot;&gt;https://blog.csdn.net/samzlhd/article/details/90453405&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://www.almabte.eu/&quot;&gt;http://www.almabte.eu/&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4001/2019/06/26/almaBTE-1.3.2%E5%AE%89%E8%A3%85%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</link>
        <guid isPermaLink="true">http://localhost:4001/2019/06/26/almaBTE-1.3.2%E5%AE%89%E8%A3%85%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</guid>
        
        <category>almaBTE-1.3.2</category>
        
        
        <category>almaBTE</category>
        
      </item>
    
      <item>
        <title>特别鸣谢</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#创建说明&quot; id=&quot;markdown-toc-创建说明&quot;&gt;创建说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;创建说明&quot;&gt;创建说明&lt;/h1&gt;

本博客模板fork自&lt;a href=&quot;https://github.com/xudailong/xudailong.github.io&quot;&gt;https://github.com/xudailong/xudailong.github.io&lt;/a&gt;

参考教程&lt;a href=&quot;https://blog.csdn.net/xudailong_blog/article/details/78762262&quot;&gt;https://blog.csdn.net/xudailong_blog/article/details/78762262&lt;/a&gt;

等等
</description>
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4001/2019/01/15/%E8%87%B4%E8%B0%A2/</link>
        <guid isPermaLink="true">http://localhost:4001/2019/01/15/%E8%87%B4%E8%B0%A2/</guid>
        
        <category>fun</category>
        
        
        <category>fun</category>
        
      </item>
    
      <item>
        <title>我的第一个博文</title>
        <description>
</description>
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4001/2019/01/15/MyFirstBlog/</link>
        <guid isPermaLink="true">http://localhost:4001/2019/01/15/MyFirstBlog/</guid>
        
        <category>fun</category>
        
        
        <category>fun</category>
        
      </item>
    
      <item>
        <title>Jekyll 搭建静态博客</title>
        <description>
保留的原来模板里的东西

一直以来都想搭建一个自己的博客，但是近半年做项目太忙，再加上教研室的网络很坑爹，所以也一直没顾得上。之前用过 WordPress 托管在免费的京东云擎上，但是速度太慢。在知乎上看到一些相关的内容，于是选择了在github上用jekyll搭建博客。

</description>
        <pubDate>Mon, 16 Feb 2015 06:14:54 +0800</pubDate>
        <link>http://localhost:4001/2015/02/16/create-my-blog-with-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4001/2015/02/16/create-my-blog-with-jekyll/</guid>
        
        <category>jekyll</category>
        
        <category>RubyGems</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>hello jekyll!</title>
        <description>保留的原来模板里的东西 当年创建 jekyll 时默认的一篇文章，没什么意义，我也一直没删除，留个纪念吧。</description>
        <pubDate>Tue, 10 Feb 2015 23:14:54 +0800</pubDate>
        <link>http://localhost:4001/2015/02/10/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4001/2015/02/10/welcome-to-jekyll/</guid>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
